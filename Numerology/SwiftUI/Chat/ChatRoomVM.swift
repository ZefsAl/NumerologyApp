//
//  ChatVM.swift
//  Numerology
//
//  Created by Serj_M1Pro on 16.06.2025.
//

import Foundation
import RealmSwift


/// - —Ö—Ä–∞–Ω–∏–º –≤—Å–µ –≤ –ø–µ—Ä–µ–º–µ—à–∫—É –Ω–æ –ø—Ä–∏ –ø–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ obj.chatID –∏ –¥–∞—Ç–∞–º
/// - View –æ—Ç–æ–±—Ä–∞–∑–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–∏–ø Message
/// - –ù–æ —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ MessageObject

class ChatRoomVM: ObservableObject {
    
    @Published var streamingMessage: String? = nil
    @Published var isStreaming: Bool = false
    /// –î–ª—è UI 
    @Published var messages: [MessageObject] = []
    @Published var newMessage: String = ""
    @Published var isLoading: Bool = false
    
    private var realm: Realm
    private var expertModel: ExpertModel
    private let streamingManager = DeepSeekStreamingManager()
    
    /// –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Realm
    private var notificationToken: NotificationToken?
    
    // MARK: - init
    init(expertModel: ExpertModel) {
        let config = Realm.Configuration(objectTypes: [MessageObject.self])
        self.realm = try! Realm(configuration: config)
        self.expertModel = expertModel
        self.fillData_view()
    }
    
    // MARK: - get Realm Results
    /// –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–Ω—å—à–µ observe
    var getRealmResults: Results<MessageObject> {
        return realm.objects(MessageObject.self)
            .filter("chatID == %@", expertModel.chatID)
            // .filter("role != %@", "system") // –Ω–µ —Ç–∞–∫
            .sorted(byKeyPath: "date", ascending: true)
    }
    
    
    // MARK: - private func fillData_view
    private func fillData_view() {
        self.messages = Array(self.getRealmResults)
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        notificationToken = self.getRealmResults.observe { [weak self] changes in
            guard let self = self else { return }
            switch changes {
            case .initial(let initial):
                print("üî∂ initial")
                // –ü–µ—Ä–≤—ã–π —Ä–∞–∑: —É–∂–µ –≤–∑—è–ª–∏ –≤—ã—à–µ, –Ω–æ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–Ω–æ–≤–∞
                self.messages = Array(initial)
            case .update(let updatedResults, _, _, _):
                print("üî∂ update")
                // –ü—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ Realm –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤
                self.messages = Array(updatedResults)
            case .error(let error):
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
                myPrint("‚ùå Realm notification error:", error)
            }
        }
    }
    
    // MARK: - add Message To Realm
    private func addMessageToRealm(obj: MessageObject) {
        try! self.realm.write {
            self.realm.add(obj, update: .modified)
        }
    }
    
    func clearHistory() {
        let toDelete = realm.objects(MessageObject.self)
            .filter("chatID == %@", self.expertModel.chatID)
        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏—Ç—å UI-–º–∞—Å—Å–∏–≤
        self.messages.removeAll()
        // –ó–∞—Ç–µ–º —É–¥–∞–ª–∏—Ç—å –∏–∑ Realm
        try! realm.write {
            realm.delete(toDelete)
        }
    }
    
    
    func sendMessage(onCompletion: @escaping () -> Void) {
        
        self.isLoading = true
        // prompt
        let prompt = MessageObject(chatID: self.expertModel.chatID, date: Date(), role: .system, content: ExpertViewModel.makePrompt3(self.expertModel))
        
        // Check add
        if self.getRealmResults.isEmpty && !self.getRealmResults.contains(where: { $0.role == .system }) {
            self.addMessageToRealm(obj: prompt)
        }
        
        // User
        let userMessage = MessageObject(chatID: self.expertModel.chatID, date: Date(), role: .user, content: newMessage)
        // v2
        self.addMessageToRealm(obj: userMessage)

        // AI
        self.isStreaming = true
        self.streamingMessage = ""
        // clear state
        self.newMessage = ""
        
        // Get specific messages
        let getPrompt = getRealmResults.first { $0.role == .system } ?? prompt
        let secondary_messages = getRealmResults.filter { $0.role != .system && $0 != getPrompt }.suffix(6)
        let someMessages = [getPrompt] + secondary_messages
        
        // print("üî∏someMessagesüî∏", someMessages, someMessages.count)
        
        
        streamingManager.streamMessage(
            messages: someMessages, // —Ç—É—Ç –º–æ–∂–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞–ø—Ä–∏–º–µ—Ä
            onTextReceived: { text in
                DispatchQueue.main.async {
                    self.streamingMessage! += text
                }
            },
            onCompletion: { error in
                DispatchQueue.main.async {
                    if let finalMessage = self.streamingMessage {
                        self.addMessageToRealm(obj: MessageObject(
                            chatID: self.expertModel.chatID,
                            date: Date(),
                            role: .assistant,
                            content: finalMessage)
                        )
                    }
                    self.isStreaming = false
                    self.streamingMessage = nil
                    
                    if let error = error {
                        myPrint("‚ùå‚ö†Ô∏è Streaming error:", error.localizedDescription)
                    }
                    self.streamingManager.cancelStreaming()
                    self.isLoading = false
                    onCompletion()
                }
            }
        )
        
        
    }
}

